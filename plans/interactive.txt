1. Рассказ про общее устройство тестирования интерактивок
  1a. Интерактор
  1б. Рейсы в тестировании - невозможно отличить RE/WA/TL 
  1в. Буферизация ввода. fflush, почему важно не терять переводы строк.
2. О тестирвоании
  2a. Встраиваем интерактор в решение.
     + Выделяем обшеие в функции
     + Подменяем эти функции
     + Рассказ про #ifdef
     + Общие напоминения про тестирвоание: assert, мультитест
  2b. Бонус: mkfifo
  2c. Бонус:
    r1, w1 = os.pipe()
    r2, w2 = os.pipe()
    iserv = subprocess.Popen(sys.argv[1].split(),  stdin = os.fdopen(r1), stdout = os.fdopen(w2,'w'), stderr=sys.stderr)
    sol = subprocess.Popen(sys.argv[2].split(), stdin = os.fdopen(r2), stdout = os.fdopen(w1,'w'), stderr=sys.stderr)
    sol.wait()
    iserv.wait()
3. Примеры
  3a. lower_bound в списке.  (https://codeforces.com/contest/843/problem/B)
     + 50000 элементов, можно тыкнуть в 2000
     + Тыкаем в случайные элементы. 
     + Проиграли только если не попали никуда рядом
     + Вероятность этого мала
     + Заметим, что важно, чтобы интерактор не играл против нас
  3b. k-ичный поиск, с k не больше, чем ответ (https://codeforces.com/contest/1028/problem/G)
     + Динамикой можно найти оптимальное которое можно различить
     + Она же дает ответ куда тыкать
     + Жюри тоже ее может считать, а значит если тыкнули неправильно - отправить в плохую вектку
     


